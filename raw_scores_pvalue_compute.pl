#!/usr/bin/env perl
#
# created on: 20/Dec/2011 at 16:24 by M.Alonso
# 
# This script will generate a random distribution of of raw scores
# from which later computes the pvalues associated to the raw score
# of particular kinase families. 
#
# raw scores: are computed as the summation of all shared elements
# (subs or partners) of a kinase family.
#
# random distribution of raw scores: are generated by randomly selecting
# pairs of kinases sharing at least one element. The number of pairs in
# the set will correspond to the size of the kinase family been evaluated.
# 
# size of the kinase family: is defined by the number of kinase pairs
# sharing at least one element within the same family.
#
# INPUT FILE:
# The one generated by the script: 'between_hpkfams_shared_subs|partners.pl'
#  FORMAT: hpkfamilypair proteinpair sharedsubs familypair timesfamiliescompared
# 
# 
# 
# 
# 


use strict;
use warnings;
use LoadFile;
use Statistics::R;
use List::Util qw(sum);
use List::MoreUtils qw(uniq);

my $fam_size; ## number of kinase pairs sharing at least one element within the same family.
my $samples=10000; ## number of random samples to be extracted
my $real_rawscore;
my $real_rawscore_pvalue;

my (@fields, @families_sizes, @rawscores_rand_samples);
my @fam_sizes;

my %hpkfam_shared; ## {hpkd_fam}=[pair1_shared_subs, pair2_shared_subs, pair3_shared_subs]
my %fam_size_rand_raw_scores_dist; ## {famsize}=[dist of raw scores from pairs of kinases]

##############################
## Storing data of pk pairs of the same family sharing at
## least one substrate.
my (@fams);
my $inputfile;
#$inputfile="/aloy/scratch/malonso/hpk_ppidb_201111/compare_same_distinct_families_populations/means_cdfs/partners/between_hpkfams_shared_partners.tab";
$inputfile="/aloy/scratch/malonso/scaffolds/scaffolds_adaptors_among_hpk_interactors/same_family_kinases_shared_adaptor-scaffolds/means_cdfs/between_hpkfams_shared_adapscaff.tab";

foreach(File2Array($inputfile, 1)){
  ## hpkfamilypair	proteinpair	sharedsubs	familypair	timesfamiliescompared
  @fields = splittab($_);
  
  if($fields[2] > 0){
    @fams = splitdash($fields[0]);
    if($fams[0] eq $fams[1]){
      push(@{$hpkfam_shared{$fams[0]}}, $fields[2]);
    }
  }
}

## Retrieving family sizes in data.
@fields = ();
foreach(keys %hpkfam_shared){
  push(@fields,  scalar( @{$hpkfam_shared{$_}} ) );
}
@families_sizes= sort { $a <=> $b } uniq (@fields);
##############################


##############################
## Load data and create the random distributions.
##
## Pay special attention to give the proper colnames inside R commands.
##
##

my $R = Statistics::R->new(r_bin => "/usr/bin/R");
$R->run(qq`myd <- read.table("$inputfile", head=T)`);
$R->run(q`attach(myd)`);
$R->run( qq`rawscores_rand_samples <- numeric($samples)`);

foreach $fam_size (@families_sizes){
  $R->run( qq`for(i in 1:$samples){rawscores_rand_samples[i] = sum( sample(sharedelements[which(sharedelements>0 & familypair=="DF")], $fam_size) )}`);
  @{$fam_size_rand_raw_scores_dist{$fam_size}} = @{$R->get('rawscores_rand_samples')};
  ### Saving current fam_size histogram
  my $png_name = "raw_scores_distib_famsize".$fam_size."_DF.png";
  $R->run( qq`png("$png_name")`);
  $R->run( qq`hist(rawscores_rand_samples, breaks=200, main="Raw scores distribution\nfor family size = $fam_size", col="gray", xlab="Raw Score")`);
  $R->run( qq`dev.off()`);
}
$R->stop();
##############################


##############################
## Evaluate the significance of the raw score of current family
## using the corresponding background distribution.
## Printing out.
##
my $larger_values;

printf ("%s\n", join("\t", qw(family family_size family_raw_score rawscore_pvalue) ));

foreach my $fam (keys %hpkfam_shared){
  $larger_values=0;
  $fam_size = scalar( @{$hpkfam_shared{$fam}} );
  $real_rawscore=sum(@{$hpkfam_shared{$fam}});
  ## Counting how many vales are larger than real_rawscore in @{$fam_size_rand_raw_scores_dist{$fam_size}} ?
  foreach(@{$fam_size_rand_raw_scores_dist{$fam_size}}){
    $larger_values++  if($_ > $real_rawscore);
  }
  $real_rawscore_pvalue = $larger_values / $samples;
  
  ## Define  the level of statistical significance you want starred.
  if($real_rawscore_pvalue < 0.05){  
    printf ("%s*\n", join("\t", $fam ,$fam_size, $real_rawscore, $real_rawscore_pvalue) );
  }else{
    printf ("%s\n", join("\t", $fam ,$fam_size, $real_rawscore, $real_rawscore_pvalue) );
  }
}
##############################




